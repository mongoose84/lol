# .github/workflows/deploy-api.yml
name: API - ASP .NET API CI & Deploy

# -------------------------------------------------
# When to run
# -------------------------------------------------
on:
  push:
    branches: [main]
    paths:
      - 'LolApi/**'          # only trigger when API code changes
  workflow_dispatch:         # manual trigger from the UI

# -------------------------------------------------
# Job definition
# -------------------------------------------------
jobs:
  build-and-deploy:
    runs-on: windows-latest               # needed for win‑x86 runtime
    env:
      # Folder where `dotnet publish` will drop the files
      PUBLISH_DIR: publish-output

    defaults:
      # Every `run:` step will start in the project folder
      run:
        working-directory: LolApi/lol-api

    steps:
      # -------------------------------------------------
      # Checkout the repo
      # -------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for versioning tools


      # --------------------------------------------------------------
      #  Copy the app_offline.htm from the support folder to the main folder
      # --------------------------------------------------------------
      - name: Bring site offline (copy app_offline.htm on server)
        shell: pwsh
        run: |
          curl -v --ssl -u "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" `
            "ftp://${{ secrets.FTP_URL }}" `
            -Q "RNFR ${{ secrets.FTP_SERVER_PATH }}/CI-Support/app_offline.htm" `
            -Q "RNTO ${{ secrets.FTP_SERVER_PATH }}/app_offline.htm"
          

      # -------------------------------------------------
      # Set up .NET SDK
      # -------------------------------------------------
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'          # adjust if you target another version

      # -------------------------------------------------
      # Restore NuGet packages (optional but clearer logs)
      # -------------------------------------------------
      - name: Restore dependencies
        run: dotnet restore

      # -------------------------------------------------
      # Publish a **self‑contained** Windows‑x86 binary
      # -------------------------------------------------
      - name: Publish (self-contained)
        run: |
          dotnet publish -c Release -r win-x86 --self-contained=true  -o./${{ env.PUBLISH_DIR }}

      # -------------------------------------------------
      # ***Write to the secrets file ***
      # -------------------------------------------------
      - name: Create secret   # runs on the default PowerShell shell
        env:
          RIOT_KEY: ${{ secrets.RIOT_API_KEY }}
          PUBLISH_DIR: ${{ env.PUBLISH_DIR }}   # "publish-output"
        run: |
          Write-Host "::add-mask::$env:RIOT_KEY"

          $targetPath = Join-Path -Path $env:PUBLISH_DIR -ChildPath "RiotSecret.txt"
          Set-Content -Path $targetPath -Value $env:RIOT_KEY -Encoding UTF8

          if (Test-Path -Path $targetPath) {
              Write-Host "✅ File created"
          } else {
              Write-Error "❌ Failed to create file"
              exit 1
          }

      # -------------------------------------------------
      # Verify the publish folder (helps debugging)
      # -------------------------------------------------
      - name: List publish output
        run: |
          echo "=== Files that will be uploaded ==="
          ls -R ./${{ env.PUBLISH_DIR }}

      # -------------------------------------------------
      # Deploy new files via FTPS
      # -------------------------------------------------
      - name: Deploy new files to FTP server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_URL }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          # Point to the SAME folder we just verified
          local-dir: ./LolApi/lol-api/${{ env.PUBLISH_DIR }}/
          server-dir: ${{ secrets.FTP_SERVER_PATH }}
          # optional safety flags
          # dry-run: false
          # timeout: 30

       # --------------------------------------------------------------
      # Bring site back online (move te  app_offline.htm to the support folder)
      # --------------------------------------------------------------
      - name: Bring site back online (delete app_offline.htm)
        shell: pwsh
        run: |
          curl -v --ssl -u "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" `
            "ftp://${{ secrets.FTP_URL }}" `
            -Q "RNFR ${{ secrets.FTP_SERVER_PATH }}/app_offline.htm" `
            -Q "RNTO ${{ secrets.FTP_SERVER_PATH }}/CI-Support/app_offline.htm"

